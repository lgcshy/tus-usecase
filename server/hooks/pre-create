#!/usr/bin/env python3
"""
TUS Pre-Create Hook

This hook is called before an upload is created. It can be used to:
- Validate upload requests
- Check user permissions
- Enforce upload policies (file size, type, etc.)
- Set custom metadata
- Reject unauthorized uploads

Environment variables available:
- TUS_ID: Upload ID
- TUS_SIZE: Upload size in bytes
- TUS_OFFSET: Current offset (usually 0 for pre-create)
- TUS_METADATA: Upload metadata (base64 encoded)
"""

import os
import sys
import json
import base64
import logging
from typing import Dict, Any, Optional

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def decode_metadata(metadata_b64: str) -> Dict[str, str]:
    """Decode TUS metadata from base64 format."""
    try:
        if not metadata_b64:
            return {}
        
        # Decode base64 metadata
        metadata_str = base64.b64decode(metadata_b64).decode('utf-8')
        metadata = {}
        
        # Parse comma-separated key-value pairs
        for pair in metadata_str.split(','):
            if ' ' in pair:
                key, value = pair.split(' ', 1)
                # Values are base64 encoded
                try:
                    metadata[key] = base64.b64decode(value).decode('utf-8')
                except:
                    metadata[key] = value
        
        return metadata
    except Exception as e:
        logger.error(f"Failed to decode metadata: {e}")
        return {}

def validate_upload(upload_size: int, metadata: Dict[str, str]) -> tuple[bool, Optional[str]]:
    """Validate the upload request."""
    
    # Check maximum file size (100MB)
    MAX_FILE_SIZE = 100 * 1024 * 1024
    if upload_size > MAX_FILE_SIZE:
        return False, f"File size {upload_size} exceeds maximum allowed size of {MAX_FILE_SIZE} bytes"
    
    # Check minimum file size (1 byte)
    if upload_size <= 0:
        return False, "File size must be greater than 0"
    
    # Validate file type if provided
    filename = metadata.get('filename', '')
    if filename:
        # Allow specific file extensions
        allowed_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.pdf', '.txt', '.zip', '.tar.gz']
        if not any(filename.lower().endswith(ext) for ext in allowed_extensions):
            return False, f"File type not allowed. Allowed types: {', '.join(allowed_extensions)}"
    
    # Check for required metadata
    if not metadata.get('filename'):
        return False, "Filename metadata is required"
    
    return True, None

def main():
    """Main hook execution."""
    try:
        # Get TUS environment variables
        upload_id = os.environ.get('TUS_ID', '')
        upload_size = int(os.environ.get('TUS_SIZE', '0'))
        upload_offset = int(os.environ.get('TUS_OFFSET', '0'))
        metadata_b64 = os.environ.get('TUS_METADATA', '')
        
        # Decode metadata
        metadata = decode_metadata(metadata_b64)
        
        logger.info(f"Pre-create hook called for upload {upload_id}")
        logger.info(f"Upload size: {upload_size} bytes")
        logger.info(f"Upload offset: {upload_offset}")
        logger.info(f"Metadata: {metadata}")
        
        # Validate upload
        is_valid, error_message = validate_upload(upload_size, metadata)
        
        if not is_valid:
            logger.error(f"Upload validation failed: {error_message}")
            # Exit with non-zero code to reject the upload
            sys.exit(1)
        
        # Log successful validation
        logger.info(f"Upload validation successful for {metadata.get('filename', 'unknown file')}")
        
        # You could also modify response headers here
        # For example, set custom metadata or storage location
        
        # Example: Set custom storage path based on file type
        filename = metadata.get('filename', '')
        if filename.endswith('.jpg') or filename.endswith('.jpeg') or filename.endswith('.png'):
            print("Hook-Storage-Path: images/")
        elif filename.endswith('.pdf'):
            print("Hook-Storage-Path: documents/")
        else:
            print("Hook-Storage-Path: files/")
        
        # Exit successfully to allow the upload
        sys.exit(0)
        
    except Exception as e:
        logger.error(f"Pre-create hook failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()